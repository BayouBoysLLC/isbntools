#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Rename files using metadata."""

import sys
import logging
from difflib import get_close_matches
from isbntools import (canonical, clean, config, get_canonical_isbn,
                       get_isbnlike, meta, registry, quiet_errors)
from isbntools.dev.lab import File, cwdfiles
from isbntools.bouth23 import b2u3

FORMAT = '%(message)s'
logging.basicConfig(level=logging.INFO, format=FORMAT)


def usage(wservs="wcat|goob|..."):
    """Write usage message."""
    sys.stderr.write('Usage: \n\nisbn_ren [ISBN] [%s] '
                     '[apikey] [pattern] filename\n  ' % (wservs))
    sys.stderr.write(
        '\n  - If no ISBN is provided, the file name will \n'
        '    be searched for a valid ISBN and in this case you \n'
        '    can enter a glob pattern like "*.pdf". \n'
        '  - [pattern] must be a string in quotes containing\n  '
        '    only ASCII letters, digits and \'#\'-_.,() \'\n  '
        '    and one or more of the following placeholders:\n  '
        '    - {authorsFullNames}    (full names of the author(s))\n  '
        '    - {authorsLastNames}    (last names of the author(s))\n  '
        '    - {firstAuthorLastName} (only last name of first author)\n  '
        '    - {year}\n  '
        '    - {publisher}\n  '
        '    - {title}\n  '
        '    - {isbn}(ISBN-13) \n  '
        '    - {language}\n  '
        '    Author names are separated with commas, (\',\').\n  '
        '    Default pattern is \"'
        '{firstAuthorLastName}{year}_{title}_{isbn}\".\n\n')
    sys.exit(1)


def parse_args(args):
    """Parse and return a tuple of the command line arguments."""
    fn = args[-1]
    service = None
    key = None
    isbn = None
    pattern = None
    if len(args) == 1:
        return (isbn, service, key, pattern, fn)
    isbn = get_canonical_isbn(canonical(clean(args[0])))
    providers = list(registry.services.keys())
    if isbn:
        args.pop(0)
    if args[0] != fn:
        service = args[0]
        match = get_close_matches(service, providers)
        if len(match) == 1:
            service = match[0]
        else:
            service = None
            pattern = args[0]
        key = None if args[1] == fn else args[1]
        if key and '{' in key:
            pattern = key
            key = None
        if not args[1] == fn:
            pattern = pattern if args[2] == fn else args[2]
    return (isbn, service, key, pattern, fn)


def get_isbn(filename):
    """Extract the ISBN from file's name."""
    isbn = canonical(get_isbnlike(filename, level='normal')[0])
    if not isbn:
        sys.stderr.write('no ISBN found in name of file %s \n' % filename)
        return
    return isbn


def reg_apikey(service, apikey):
    """Register API-KEY."""
    try:
        config.add_apikey(service, apikey)
    except:
        pass


def get_metadata(isbn, service='default'):
    """Get metadata."""
    service = service if service else 'default'
    return meta(isbn, service)


def renfile(oldbasename, newbasename):
    """Rename file."""
    newbasename = b2u3(newbasename)
    oldfile = File(oldbasename)
    if oldfile.mkwinsafe(newbasename) == oldbasename:
        return True
    success = oldfile.baserename(newbasename)
    if success:
        try:
            sys.stdout.write('%s renamed to %s \n' %
                             (oldbasename, oldfile.basename))
        except:
            pass
        return True
    return


def is_fnpatt(filename):
    """Check if filename is a fnpattern."""
    return True if '*' in filename or '?' in filename else False


def rencwdfiles(fnpatt="*", pattern='default', service='default'):
    """Rename cwd files with a ISBN in their filenames and within fnpatt."""
    from isbntools.dev.rename import newfilename
    files = [(get_isbn(f), f) for f in cwdfiles(fnpatt) if get_isbn(f)]
    for isbn, file in files:
        metadata = get_metadata(isbn, service)
        newname = newfilename(metadata, pattern)
        if not newname:
            continue
        oldfile = File(file)
        ext = oldfile.ext
        newbasename = newname + ext
        oldbasename = oldfile.basename
        renfile(oldbasename, newbasename)
    return True


def main(args):
    """Rename files."""
    from isbntools.dev.rename import checkpattern, newfilename
    isbn, service, apikey, pattern, filename = parse_args(args)

    if pattern and not checkpattern(pattern):
        return

    if apikey:
        reg_apikey(service, apikey)

    if not isbn:
        if is_fnpatt(filename):
            return rencwdfiles(filename, pattern, service)
        isbn = get_isbn(filename)
        if not isbn:
            return

    metadata = get_metadata(isbn, service)
    newname = newfilename(metadata, pattern)
    oldfile = File(filename)
    ext = oldfile.ext

    if newname:
        newbasename = newname + ext
    else:
        sys.stderr.write('%s NOT renamed \n' % filename)
        return

    oldbasename = oldfile.basename
    return renfile(oldbasename, newbasename)


if __name__ == "__main__":
    sys.excepthook = quiet_errors
    success = main(sys.argv[1:]) if len(sys.argv) > 1 else False
    if success:
        sys.exit(0)
    providers = list(registry.services.keys())
    providers.remove('default')
    available = '|'.join(providers)
    usage(available)
